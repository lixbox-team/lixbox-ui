buildscript{
    repositories {
        jcenter
    }
    dependencies {
        classpath 'com.atlassian.commonmark:commonmark:0.7.0'
        classpath 'com.atlassian.commonmark:commonmark-ext-gfm-tables:0.7.0'
        classpath 'com.atlassian.commonmark:commonmark-ext-gfm-strikethrough:0.7.0'
        classpath 'com.atlassian.commonmark:commonmark-ext-autolink:0.7.0'
        classpath 'org.apache.commons:commons-lang3:3.4'
        classpath 'commons-io:commons-io:2.5'
        classpath "org.jsoup:jsoup:1.9.2"
        classpath 'org.asciidoctor:asciidoctorj:1.5.4'
    }
}

import java.lang.reflect.Method
import java.nio.charset.Charset
import java.nio.file.Files
import java.nio.file.Paths
import org.apache.commons.lang3.StringEscapeUtils;
import org.commonmark.node.*;
import org.commonmark.parser.*;
import org.commonmark.renderer.html.*;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;

import java.text.SimpleDateFormat
import java.util.regex.Matcher
import java.util.regex.Pattern;

if (!hasProperty("buildWebsiteDir")){
    ext.buildWebsiteDir = "${rootDir}/build/site/${rootProject.name}"
}
ext.webSrcDir = "${rootDir}/gradle/site/"
ext.javadocsModules = new ArrayList<>();
ext.reports = new ArrayList<>();

if (!hasProperty("site.name"))     
    ext.setProperty("site.name", rootProject.getName());

/**
 * builds the site
 */
task site(group: "Site Generation", description: 'Builds the web-site contents.')   {
    doLast {
        List<File> reportsDocs = copyReports(rootDir, true);
        copyUserSiteSrc();
        generateNavMenu();
        prepareTemplate();
        generateCannedContent(reportsDocs);
        int modifiedFiles = convertContent();
        logger.info("Site generation complete, altered " + modifiedFiles + " files");
        new File(project.ext.buildWebsiteDir + "/template.html").delete();
    }
}



def prepareTemplate(){
    long time = System.currentTimeMillis();
    project.ext.siteTemplate = "";
    project.ext.siteTimestamp = time;

    String header = readFile(ext.webSrcDir + "/template.html", Charset.defaultCharset());
    header = preprocessContents(header);
    header = header.replace('${generatedMenu}', project.ext.siteMenu);
    project.ext.siteTemplate = header;
}



int convertContent(){
    return processContent(new File(ext.buildWebsiteDir));
}



int processContent(File directory){
    int count=0;
    File f= directory;
    File[] files = f.listFiles();
    for (int i=0; i < files.length; i++){
        if (files[i].isDirectory()){
            //recurse
            count+=processContent(files[i]);
        } else if (!files[i].isHidden() && files[i].isFile()){
            if (processFile(files[i]))
                count++;
        }
    }
    return count;
}



boolean processFile(File file){
    if (file.getName().endsWith(".html") || file.getName().endsWith(".xml") || file.getName().endsWith(".txt") || file.getName().endsWith("_stress")){
        long start = System.currentTimeMillis();
        String contents = readFile(file.getAbsolutePath(), Charset.defaultCharset());
        contents = contents.replace(rootDir.absolutePath, ".");
        PrintWriter out = new PrintWriter(file);
        out.println(contents);
        out.close()
        logger.info("Transform (remove absolute paths) " + file.getAbsolutePath() + " complete in " + (System.currentTimeMillis() - start) + "ms");
        return true;
    }


    if (file.getName().endsWith(".md") || file.getName().endsWith(".asciidoc")) {
        long start = System.currentTimeMillis();
        String contents = readFile(file.getAbsolutePath(), Charset.defaultCharset());
        contents = preprocessContents(contents);
        if (file.getName().toLowerCase().endsWith(".md")) {
            List<org.commonmark.Extension> extensions = new ArrayList<>();
            extensions.add(org.commonmark.ext.gfm.tables.TablesExtension.create());
            extensions.add(org.commonmark.ext.gfm.strikethrough.StrikethroughExtension.create());
            extensions.add(org.commonmark.ext.autolink.AutolinkExtension.create());
            Parser parser = Parser.builder().extensions(extensions).postProcessor(new PostProcessor() {
                @Override
                public Node process(Node arg0) {
                    Node n = arg0;
                    while (n != null) {
                        if (arg0 instanceof Link) {
                            Link link = (Link) arg0;
                            String dest = link.getDestination();
                            if (!"".equals(dest) && !dest.startsWith("http://") && !dest.startsWith("https://")) {
                                dest = dest + ".html";
                                link.setDestination(dest);
                            }
                        }
                        process(n.getFirstChild());
                        n= n.getNext();
                    }
                    return arg0;
                }
            }).build();

            Node document = parser.parse(contents);
            HtmlRenderer renderer = HtmlRenderer.builder().extensions(extensions).build();
            contents = renderer.render(document);

            String template = project.ext.siteTemplate;
            contents = template.replace('${body}', contents);

            String targetFileName = file.getAbsolutePath();
            targetFileName = targetFileName.substring(0, targetFileName.lastIndexOf(".")) + ".html"

            PrintWriter out = new PrintWriter(targetFileName);
            out.println(contents);
            out.close()
            logger.info("Transform as markdown " + file.getAbsolutePath() + " complete in " + (System.currentTimeMillis() - start) + "ms");
            file.delete();
            return true;
        }
        else if (file.getName().toLowerCase().endsWith(".asciidoc")) {
            org.asciidoctor.Asciidoctor asciidoctor = org.asciidoctor.Asciidoctor.Factory.create();
            Map<String, Object> asciidoctorOptions = org.asciidoctor.OptionsBuilder.options().safe(
                    org.asciidoctor.SafeMode.SAFE)
                    .asMap();
            contents = asciidoctor.convert(contents,asciidoctorOptions);

            String template = project.ext.siteTemplate;
            contents = template.replace('${body}', contents);

            String targetFileName = file.getAbsolutePath();
            targetFileName = targetFileName.substring(0,targetFileName.lastIndexOf(".")) + ".html"
            PrintWriter out = new PrintWriter(targetFileName);
            out.println(contents);
            out.close()
            logger.info("Transform as asciidoc " + file.getAbsolutePath() + " complete in " + (System.currentTimeMillis() - start) + "ms");
            file.delete();
            return true;
        }
    }
    return false;
}



def preprocessContents(String content){
    Properties p = new Properties();
    p.load(new FileInputStream(rootDir.absolutePath + "/gradle.properties"));
    def iterator = p.entrySet().iterator();
    while (iterator.hasNext()){
        def next = iterator.next();
        content=content.replace('${' + next.getKey() + '}', StringEscapeUtils.escapeHtml4(next.getValue()));
    }
    content=content.replace('${pom.version}', StringEscapeUtils.escapeHtml4(rootProject.version.toString()));
    content=content.replace('${site.name}', StringEscapeUtils.escapeHtml4(rootProject.name));
    content=content.replace('${pom.scm.developerConnection}', StringEscapeUtils.escapeHtml4("$config.desc_project.pic.git.uri"));
    content=content.replace('${pom.ciManagement.url}', StringEscapeUtils.escapeHtml4("$config.desc_project.pic.jenkins.uri"));
    content=content.replace('${pom.qualityManagement.site.url}', StringEscapeUtils.escapeHtml4("$config.desc_project.pic.sonar.uri"));
    content=content.replace('${pom.url}', StringEscapeUtils.escapeHtml4("$config.desc_project.pic.projectsite.uri"));
    
    SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
    content=content.replace('${currentYYYYMMDD}', sdf.format(new Date(project.ext.siteTimestamp)));

    sdf = new SimpleDateFormat("yyyy-MM-dd");
    content=content.replace('${currentYYYY-MM-DD}', sdf.format(new Date(project.ext.siteTimestamp)));
    return content;
}



static String readFile(String path, Charset encoding) throws IOException{
    byte[] encoded = Files.readAllBytes(Paths.get(path));
    return new String(encoded, encoding);
}



def generateNavMenu(){
    StringBuilder sb = new StringBuilder();
    File[] srcs =new File(ext.webSrcDir).listFiles(new FilenameFilter() {
        @Override
        boolean accept(File file, String name) {
            if (name.toLowerCase().endsWith(".html") ||
                    name.toLowerCase().endsWith(".md") ||
                    name.toLowerCase().endsWith(".asciidoc") ||
                    name.toLowerCase().endsWith(".pdf"))
                return true;
            return false;
        }
    });
    if (srcs!=null){
        for (int i=0; i < srcs.length; i++){
            String file = srcs[i].getName();
            if (file.equalsIgnoreCase("template.html"))
                continue;
            if (file.equalsIgnoreCase("index.md"))
                continue;
            //trim off the extension
            file = file.substring(0,file.lastIndexOf("."));
            String name = file;
            name = name.replace("-", " ");
            name = org.apache.commons.lang3.StringUtils.join(
                    org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase(name),' ');
            name = org.apache.commons.lang3.StringUtils.capitalize(name);
            sb.append(" <li>\n\n" +
                    "      <a href=\"" + file + ".html\" title=\"" + StringEscapeUtils.escapeHtml4(name) + "\">\n" +
                    "         <span class=\"none\"></span>\n" + StringEscapeUtils.escapeHtml4(name) + "</a>\n" +
                    "  </li>" );
        }
    }
    project.ext.siteMenu = sb.toString();
}



def generateReportList(List<File> reports){
    PrintWriter out;
    String rootdir = ext.buildWebsiteDir;
    String rootdir2 = rootdir.replace('\\',"/");
    StringBuilder reportsMarkdown = new StringBuilder();
    reportsMarkdown.append('## Project Reports\n Here\'s all the Reports that were generated during the build for the project [${site.name}](${pom.url})\n\n');
    reportsMarkdown.append("| Module \t | Report Type\t| Link \t|\n");
    reportsMarkdown.append("| ------ \t | ------     \t| ---- \t|\n")

    List<ReportsContainer> rpts = scanReports(reports);
    for (int i=0; i < rpts.size(); i++){
        ReportsContainer r = rpts.get(i);
        for (int k=0; k < r.links.size(); k++){
            reportsMarkdown.
                    append("| ").
                    append(r.module).
                    append(" | ").
                    append(org.apache.commons.lang3.StringUtils.capitalize(r.reportType)).
                    append(" \t| ");

            def uri =  r.links.get(k).url.replace('\\',"/").replace(rootdir2,".");
            if (uri.startsWith('/')){
                uri = "."+uri;
            }       
            reportsMarkdown.
                    append("<a href=\"javascript:showReport('" + uri + "');\">").
                    append(org.apache.commons.lang3.StringUtils.capitalize(r.links.get(k).text)).
                    append("</a> ");
            reportsMarkdown.append(" | \n");
        }
    }
    reportsMarkdown.append("\n\n");
    out = new PrintWriter(rootdir + "/reports.md");
    out.println(reportsMarkdown.toString());
    out.close()
}


class ReportsContainer{
    String module;
    String reportType;
    List<Link> links = new ArrayList<>();

    static ReportsContainer containsModuleReport(String module, String reportType, List<ReportsContainer> items){
        for (int i=0; i < items.size(); i++){
            if (items.get(i).module.equalsIgnoreCase(module) &&
                    items.get(i).reportType.equalsIgnoreCase(reportType))
                return items.get(i);
        }
        return null;
    }

    static String readFile(String path, Charset encoding)
            throws IOException
    {
        byte[] encoded = Files.readAllBytes(Paths.get(path));
        return new String(encoded, encoding);
    }
}

class Link{
    String text;
    String url;

    public String toString(){
        return "Link: " + text + " " + url;
    }
    public static boolean containsLink(List<Link> links,  Link newlink){
        if (links==null || newlink==null)
            return false;
        for (int i=0; i < links.size(); i++){
            if (links.get(i).text.equalsIgnoreCase(newlink.text) &&
                links.get(i).url.equalsIgnoreCase(newlink.url))
                return true;
        }
        return false;
    }
}

List<ReportsContainer> scanReports(List<String> reports){
    List<ReportsContainer> ret = new ArrayList<>();
    String rootdir = ext.buildWebsiteDir;
    System.out.println("scanning reports in " + rootdir);
    if (File.separator != '/')
        rootdir = rootdir.replace('\\',"/");
    for (int i = 0; i < reports.size(); i++) {
        File f = reports.get(i);
        //f is the module name

        File[] report = f.listFiles();
        if (report != null) {
            for (int k = 0; k < report.length; k++) {
                File test = report[k];
                if (test.getName().equalsIgnoreCase("findbugs")
                        || test.getName().equalsIgnoreCase("checkstyle")
                        || test.getName().equalsIgnoreCase("jdepend")
                        || test.getName().equalsIgnoreCase("pmd")
                        || test.getName().equalsIgnoreCase("owasp")){

                    File[] buggers = test.listFiles(new FilenameFilter() {
                        @Override
                        boolean accept(File file, String s) {
                            return (s.toLowerCase().endsWith("ml"))
                        }
                    });
                    if (buggers!=null){
                        for (int bb=0;bb < buggers.length; bb++){
                            String subpath = buggers[bb].getAbsolutePath().replace(rootdir, "");
                            ReportsContainer r =null;
                            r = ReportsContainer.containsModuleReport(f.getName(), test.getName(), ret);
                            if (r==null){
                                r = new ReportsContainer();
                                r.module = f.getName();
                                r.reportType = test.getName();
                                Link l = new Link();
                                l.text = buggers[bb].getName().substring(0, buggers[bb].getName().lastIndexOf("."));
                                l.url =subpath;
                                r.links.add(l);
                                ret.add(r);
                            } else {
                                Link l = new Link();
                                l.text =  buggers[bb].getName().substring(0, buggers[bb].getName().lastIndexOf("."));
                                l.url =subpath;
                                if (!Link.containsLink(r.links,l)) {
                                    r.links.add(l);
                                }
                            }
                        }
                    }
                } else if (test.getName().equalsIgnoreCase("performance")){
                    File[] buggers = test.listFiles(new FilenameFilter() {
                            @Override
                            boolean accept(File file, String s) {
                                return (s.toLowerCase().endsWith("_stress"))
                            }
                        });
                    if (buggers!=null && buggers.length>0){
                        for (int bb=0;bb < buggers.length; bb++){
                            String subpath = buggers[bb].getAbsolutePath().replace(rootdir, "");
                            ReportsContainer r =null;
                            r = ReportsContainer.containsModuleReport(f.getName(), test.getName(), ret);
                            if (r==null){
                                r = new ReportsContainer();
                                r.module = f.getName();
                                r.reportType = test.getName();
                                Link l = new Link();
                                l.text = buggers[bb].getName();
                                l.url =subpath;
                                r.links.add(l);
                                ret.add(r);
                            } else {
                                Link l = new Link();
                                l.text =  buggers[bb].getName();
                                l.url =subpath;
                                if (!Link.containsLink(r.links,l)) {
                                    r.links.add(l);
                                }
                            }
                        }
                    }
                } else if (test.getName().equalsIgnoreCase("jacoco")){
                    //get all .html files within the folder 'test' and add to the findbugs reports
                    File rpt = new File(test.absolutePath + "/index.html");
                    if (rpt.exists()) {
                        String subpath = rpt.getAbsolutePath().replace(rootdir, "");
                        ReportsContainer r = null;
                        r = ReportsContainer.containsModuleReport(f.getName(), test.getName(), ret);
                        if (r == null) {
                            r = new ReportsContainer();
                            r.module = f.getName();
                            r.reportType = test.getName();
                            Link l = new Link();
                            l.text = test.getName()
                            l.url = subpath;
                            r.links.add(l);
                            ret.add(r);
                        } else {
                            //report already exists, just add a new link

                            Link l = new Link();
                            l.text = test.getName()
                            l.url = subpath;
                            if (!Link.containsLink(r.links, l)) {
                                r.links.add(l);
                            }
                        }
                    }
                } else if (test.getName().equalsIgnoreCase("tests")){
                    //get all .html files within the folder 'test' and add to the findbugs reports
                    File rpt = new File(test.absolutePath + "/test/index.html");
                    if (rpt.exists()) {
                        String subpath = rpt.getAbsolutePath().replace(rootdir, "");
                        ReportsContainer r = null;

                        r = ReportsContainer.containsModuleReport(f.getName(), test.getName(), ret);

                        if (r == null) {
                            r = new ReportsContainer();
                            r.module = f.getName();
                            r.reportType = test.getName();


                            Link l = new Link();
                            l.text = test.getName()
                            l.url = subpath;
                            r.links.add(l);
                            ret.add(r);
                        } else {
                            //report already exists, just add a new link

                            Link l = new Link();
                            l.text = test.getName()
                            l.url = subpath;
                            if (!Link.containsLink(r.links, l)) {
                                r.links.add(l);
                            }
                        }
                    }
                } else if (test.getName().startsWith("dependency")){
                    File[] buggers = test.listFiles(new FilenameFilter() {
                            @Override
                            boolean accept(File file, String s) {
                                return (s.toLowerCase().endsWith(".html"))
                            }
                        });
                    if (buggers!=null && buggers.length>0){
                        for (int bb=0;bb < buggers.length; bb++){
                            String subpath = buggers[bb].getAbsolutePath().replace(rootdir, "");
                            ReportsContainer r =null;
                            r = ReportsContainer.containsModuleReport(f.getName(), test.getName(), ret);
                            if (r==null){
                                r = new ReportsContainer();
                                r.module = f.getName();
                                r.reportType = test.getName();
                                Link l = new Link();
                                l.text = "report";
                                l.url =subpath;
                                r.links.add(l);
                                ret.add(r);
                            } else {
                                Link l = new Link();
                                l.text = buggers[bb].getName();
                                l.url =subpath;
                                if (!Link.containsLink(r.links,l)) {
                                    r.links.add(l);
                                }
                            }
                        }
                    }
                }  else{
                    logger.debug(test.getAbsolutePath() + " skipped");
                }
            }
        }
    }
    return ret;
}



def generateProjectInfo(){

    PrintWriter out;
    String rootdir = ext.buildWebsiteDir;

    //reportsMarkdown docs
    StringBuilder reportsMarkdown = new StringBuilder();

    reportsMarkdown.append('## Project Information\n This document provides an overview of the various documents and links that are part of this project\'s general information. All of this content is automatically generated by [Gradle-Fury](https://github.com/gradle-fury/gradle-fury) on behalf of the project.\n' +
            '\n\n# Modules\n\n');
    reportsMarkdown.append("| Group | Artifact |  Version | Description | Type | Variants |\n");
    reportsMarkdown.append("| --- | --- | --- | --- | --- | --- |\n")
    subprojects.each { p ->
        boolean java=p.plugins.hasPlugin('java');
        boolean distro = p.plugins.hasPlugin('distribution') || p.plugins.hasPlugin('application');
        boolean war = p.plugins.hasPlugin('war');
        boolean aar = p.plugins.hasPlugin('com.android.library')
        boolean apk = p.plugins.hasPlugin('com.android.application')

        String type = "";
        if (java) {
            type = " jar "
        }
        if (war) {
            type = " war ";
        }
        if (aar) {
            type = " aar ";
        }
        if (apk) {
            type = " apk ";
        }
        if (distro){
            type+=" zip "
        }

        //artifact name
        String path = p.path;
        path = path.substring(path.lastIndexOf(":")+1);

        reportsMarkdown.append("| " +  StringEscapeUtils.escapeHtml4(p.group) + " | ");

        StringBuilder sb = new StringBuilder();
        //variants
        if (apk || aar){
            def variants

            if (p.android.hasProperty('applicationVariants')) {
                variants = p.android.applicationVariants;
            } else if (p.android.hasProperty('libraryVariants')) {
                variants = p.android.libraryVariants;
            }
            variants.all { variant ->
                //replace the release flag, since we strip it in the publishArtifacts task
                String n = variant.name;
                n = n.replace("-release", "");    //everything else
                n = n.replace("Release", ""); //android
                sb.append(n).append(" ");
            }
        }

        //this part shows the quick copy and paste menu for the artifacts
        reportsMarkdown.append("<a href=\"javascript:showModal('" + p.group + "','" + path + "','" + p.version + "','" + type + "','" + sb.toString() + "');\">");
        reportsMarkdown.append( StringEscapeUtils.escapeHtml4(path) + "</a> | " + StringEscapeUtils.escapeHtml4(p.version.toString())  );

        reportsMarkdown.append(" | ").append(StringEscapeUtils.escapeHtml4(p.description)).append(" | ").append(type).append(" | ");

        //variants
        if (apk || aar){
            def variants

            if (p.android.hasProperty('applicationVariants')) {
                variants = p.android.applicationVariants;
            } else if (p.android.hasProperty('libraryVariants')) {
                variants = p.android.libraryVariants;
            }
            //this part renders the readable text on the overview page
            variants.all { variant ->
                String n = variant.name;
                reportsMarkdown.append(n).append("<br>");
            }
        }
        reportsMarkdown.append("\n");
    }

    reportsMarkdown.append("\n\n");
    out = new PrintWriter(rootdir + "/project-info.md");
    out.println(reportsMarkdown.toString());
    out.close()
}



def reflect(object) {
    Method[] bits = object.class.methods
    for (int k =0; k < bits.length; k++){
        System.out.println("REFLECT " + bits[k].name);
        for (int x= 0; x < bits[k].parameterTypes.length; x++) {
            System.out.println("\t" + bits[k].parameterTypes[x].name);
        }
    }

    //println "REFLECT groovy methods" + object.metaClass.methods*.name.sort().unique()
    object.metaClass.properties.each {println "REFLECT groovy properties"+ it.name }

}



def generateRepositories(){

    //dependency-repos

    PrintWriter out;
    String rootdir = ext.buildWebsiteDir;


    //reportsMarkdown docs
    StringBuilder reportsMarkdown = new StringBuilder();

    reportsMarkdown.append('## Dependency Repositories\n This document provides a listing of repositories this project uses for resolving dependencies. It may be useful to you if you use any of this project\'s dependencies within your own project.\n');
    reportsMarkdown.append('\n\n## Repositories\n\n');
    reportsMarkdown.append("| id | Name \t |  Url |\n");
    reportsMarkdown.append("| ------ \t | ------ \t| ---- \t| \n")
    project.repositories.each {
        if (!it.url.toString().startsWith("file:/")) {
            reportsMarkdown.append(it.name).append(" | ");
            reportsMarkdown.append( it.name).append(" | ");
            reportsMarkdown.append(it.url).append(" \n");
        }

    }
    reportsMarkdown.append("\n\n");
    out = new PrintWriter(rootdir + "/dependency-repos.md");
    out.println(reportsMarkdown.toString());
    out.close()
}



def generateCannedContent(List<File> reports) {
    generateProjectInfo();
    generateReportList(reports);
    generateLicenses();
    generateRepositories();
}



def generateLicenses(){
    //pom.licenses.license.0.name
    PrintWriter out;
    String rootdir = ext.buildWebsiteDir;

    //team-list
    StringBuilder team = new StringBuilder();

    team.append('## Overview\n Typically the licenses listed for the project are that of the project itself, and not of dependencies.\n' +
            '\n## Project Licenses\n\n');


    if (hasProperty("pom.licenses.license.0.name")) {
        team.append("| License | Link \t |  Distribution |\n");
        team.append("| ------ \t | ------ \t| ---- |\n")
        for (def i = 0; hasProperty("pom.licenses.license.${i}.name"); ++i) {

            team.append(project.property("pom.licenses.license.${i}.name")).append(" | ");

            if (hasProperty("pom.licenses.license.${i}.url"))
            team.append("[").append(project.property("pom.licenses.license.${i}.url")).append("](").append(project.property("pom.licenses.license.${i}.url")).append(")");
            team.append(" | ");
            team.append((hasProperty("pom.licenses.license.${i}.distribution")
                    ? project.property("pom.licenses.license.${i}.distribution") : ""));
            team.append("\n");
        }
    }
    else team.append("No license was listed, check gradle.properties");

    team.append("\n\n");
    out = new PrintWriter(rootdir + "/project-license.md");
    out.println(team.toString());
    out.close()
}


def copyUserSiteSrc(){
    copy {
        from new File(ext.webSrcDir).absolutePath
        into ext.buildWebsiteDir
    }
    if (new File(rootDir, 'README.md').exists())
    {
        copy {        
            from new File(rootDir, 'README.md').absolutePath
            into ext.buildWebsiteDir
            rename { String fileName ->
              fileName.replace("README.md", "index.md")
            }
        }
    }
}



List<File> copyReports(File currentDir, boolean firstRun) {
    List<File> ret = new ArrayList<>();
    File[] files = currentDir.listFiles();
    if (files != null) {
        for (int i = 0; i < files.length; i++) {
            if (firstRun && files[i].getAbsolutePath().endsWith("build"))
                continue;
            if (files[i].getAbsolutePath().endsWith("build" + File.separator + "reports")) {
                String[] s2;
                if (File.separator == '/')
                    s2 = files[i].getAbsolutePath().split(File.separator );
                else
                    s2 = files[i].getAbsolutePath().split('\\\\');
                String module = s2[s2.length-3];
                copy {
                    from files[i].absolutePath
                    into ext.buildWebsiteDir + File.separator + "reports" + File.separator + module
                }
                System.out.println(files[i].getAbsolutePath() + " copied");
                ret.add(new File(ext.buildWebsiteDir + File.separator + "reports" + File.separator + module));
            } else if (files[i].getAbsolutePath().contains("build" + File.separator + "outputs")) {
                    //this part is primarily for apk and aar lint reports
                String[] s2;
                if (File.separator == '/')
                    s2 = files[i].getAbsolutePath().split(File.separator);
                else s2 = files[i].getAbsolutePath().split('\\\\');
                String module = s2[s2.length-3];
                copy {
                    from files[i].absolutePath
                    into ext.buildWebsiteDir +File.separator + "reports" +  File.separator + module
                    include '*.html'
                    include 'lint*/**'
                }
                    ret.add(new File(ext.buildWebsiteDir + File.separator+ "reports" + File.separator + module));
            System.out.println(files[i].getAbsolutePath() + " copied android");

            }
            else if (files[i].isDirectory() &&
                    !files[i].isHidden()) {
                //this is for subprojects, grandchildren, etc
                        ret.addAll(copyReports(files[i],false));
            }
        }
    }
    return ret;
}



class DependencyReport{
    List<Dependency> deps= new ArrayList<>();

    public Dependency get(String group, String artifact){
        for (int i=0; i < deps.size(); i++){
            if (deps.get(i).artifactId.equals(artifact) &&
                    deps.get(i).groupId.equals(group))
                    return deps.get(i);
        }
        Dependency r = new Dependency();
        r.groupId=group;
        r.artifactId = artifact;
        deps.add(r);
        return r;
    }
}



class Dependency{
    Set<String> project = new HashSet<>();//that using this dependency
    String groupId;
    String artifactId;
    Set<String> version = new HashSet<>()
    Set<String>  type= new HashSet<>()
}


task dependencyReportMd(description: 'Generates a Maven parsable dependency list for the project', group: 'Reporting') {
    doLast {
        DependencyReport rpt = new DependencyReport();
        int modules = 1;
        project.configurations.each { configuration ->
            configuration.allDependencies.each { dependency ->
                if (dependency.group != null && dependency.name != null) {
                    Set<String> t = resolveType(this.project, dependency.name, dependency.version)
                    Dependency d = rpt.get(dependency.group, dependency.name);
                    d.type.addAll(t);
                    d.project.add("root")

                    d.version.add(dependency.getVersion());
                }
            }
        }

        buildscript.configurations.all.each { configuration ->
            configuration.allDependencies.each { dependency ->
                if (dependency.group != null && dependency.name != null) {
                    if (dependency.group != null && dependency.name != null) {
                        Set<String> t = resolveType(this.project, dependency.name, dependency.version)
                        Dependency d = rpt.get(dependency.group, dependency.name);
                        d.type.addAll(t);
                        d.project.add("root buildscript")
                        d.version.add(dependency.getVersion());

                    }
                }
            }
        }

        subprojects.findAll {
            modules++;
            it.each {
                it.configurations.each { configuration ->
                    configuration.allDependencies.each { dependency ->
                        if (dependency.group != null && dependency.name != null) {
                            Set<String> t = resolveType(it, dependency.name, dependency.version)
                            Dependency d = rpt.get(dependency.group, dependency.name);
                            d.type.addAll(t);
                            d.project.add(it.name)
                            d.version.add(dependency.getVersion());
                        }
                    }
                }
            }
        }

        subprojects.findAll {
            it.each {
                it.buildscript.configurations.all.each { configuration ->
                    configuration.allDependencies.each { dependency ->
                        if (dependency.group != null && dependency.name != null) {
                            if (dependency.group != null && dependency.name != null) {
                                Set<String> t = resolveType(it, dependency.name, dependency.version)
                                Dependency d = rpt.get(dependency.group, dependency.name);
                                d.type.addAll(t);
                                d.project.add(it.name + " buildscript")
                                d.version.add(dependency.getVersion());
                            }
                        }
                    }
                }
            }
        }
        //data collected...

        String rootdir2 = project.ext.buildWebsiteDir;
        new File(rootdir2).mkdirs();
        //produce the report
        File outfile = new File(rootdir2 + "/dependencyReport.md");
        StringBuilder sb = new StringBuilder();
        sb.append("# Dependency Report (Gradle Style) \n\n" +
                "This report is useful to analyze your project's dependencies. If you are familiar with Maven's site plugin, this should look familiar " +
                "(Dependency Convergence Report). In addition, " +
                "if you want to quickly grab all of this projects dependencies and force them to load and cache for use " +
                "offline, you should be able to copy and paste the stuff below into an empty gradle.buid file or for a pom.xml.\n\n");
        sb.append("## Dependency Convergence\n\n");

        sb.append("Dependency Statistics\n\n");
        int NOC = 0;
        int NOD = 0;
        int NOA = 0;
        int NOS = 0;
        int NOWC = 0;
        for (int i = 0; i < rpt.deps.size(); i++) {
            NOD++;
            def iterator = rpt.deps.get(i).version.iterator();
            if (rpt.deps.get(i).version.size() > 1)
                NOC += rpt.deps.get(i).version.size();
            while (iterator.hasNext()) {

                if (rpt.deps.get(i).type.isEmpty()) {
                    NOA++;
                } else {
                    def iterator2 = rpt.deps.get(i).type.iterator();
                    while (iterator2.hasNext()) {
                        iterator2.next();
                        NOA++;  //requires the type classifier
                    }
                }

                String version = iterator.next();
                if (version.toLowerCase().contains("-snapshot"))
                    NOS++;
                if (version.contains("+"))
                    NOWC++;
            }
        }

        int NODNOA = 100;
        if (NOA > 0)
            NODNOA = (int) ((NOD / NOA) * 100);
        sb.append("|  | |\n")
        sb.append("| --- | --- |\n")

        sb.append("Modules: | " + modules + "\n");
        sb.append("Number of dependencies (NOD): | " + NOD + "\n");
        sb.append("Number of unique artifacts (NOA): | " + NOA + "\n");
        sb.append("Number of version-conflicting artifacts (NOC): | " + NOC + "\n");
        sb.append("Number of SNAPSHOT artifacts (NOS): | " + NOS + "\n");
        sb.append("Number of Wildcard artifacts (NOWC): | " + NOWC + "\n");
        sb.append("Convergence (NOD/NOA):| " + NODNOA + "%\n");
        String readyState = "";
        if (NOS > 0)
            readyState = "You have SNAPSHOT dependencies.<br>";
        if (NODNOA < 100) {
            readyState += "You do not have 100 % convergence.";
        }
        sb.append("Ready for release (100 % convergence and no SNAPSHOTS):| ");
        if (readyState.length() > 0)
            sb.append("**Error**<br>").append(readyState);
        else sb.append("Ready");
        sb.append("\n\n");
        if (NOC > 0)
            logger.warn("WARN - You have " + NOC + " version conflicting artifacts");
        if (NODNOA < 100)
            logger.warn("WARN - You have " + NODNOA + "% dependency convergence.");
        if (NOWC > 0)
            logger.warn("WARN - You have " + NOWC + " dependencies with wildcard versions, this will effect the stability of the build.");

        sb.append("## Gradle Dependencies, composite\n\n" +
                "This is a composite of all dependencies for this project. Useful if you need to go offline and want to force all dependencies to download. " +
                "Note: the dependencies listed below are all listed as compile, even though they may not actually be compile dependencies. Also missing is classifiers.\n\n````\n\ndependencies {\n");

        for (int i = 0; i < rpt.deps.size(); i++) {

            def iterator = rpt.deps.get(i).version.iterator();
            if (rpt.deps.get(i).version.size() > 1)
                sb.append("\n\n//WARN dependency converage flag! Currently used by the modules: " + rpt.deps.get(i).project + "\n");
            while (iterator.hasNext()) {
                if (rpt.deps.get(i).type.isEmpty()) {

                    sb.append('\tcompile: \'');
                    sb.append(rpt.deps.get(i).groupId + ":");
                    sb.append(rpt.deps.get(i).artifactId + ":");
                    sb.append(iterator.next());
                    sb.append("\'\n");
                } else {
                    def iterator2 = rpt.deps.get(i).type.iterator();
                    while (iterator2.hasNext()) {

                        sb.append('\tcompile: \'');
                        sb.append(rpt.deps.get(i).groupId + ":");
                        sb.append(rpt.deps.get(i).artifactId + ":");
                        sb.append(iterator.next());
                        sb.append("@" + iterator2.next());
                        sb.append("\'\n");
                    }
                }
            }
            if (rpt.deps.get(i).version.size() > 1)
                sb.append("//END WARN dependency converage flag!\n\n    ")
        }
        sb.append('}\n````\n');

        sb.append("## Maven Dependencies, composite\n\n" +
                "This is a composite of all dependencies for this project. Useful if you need to go offline and want to force all dependencies to download. " +
                "Note: the dependencies listed below are all listed as compile, even though they may not actually be compile dependencies. Also missing is classifiers.\n\n````\n\n<dependencies>\n");

        for (int i = 0; i < rpt.deps.size(); i++) {

            def iterator = rpt.deps.get(i).version.iterator();
            if (rpt.deps.get(i).version.size() > 1)
                sb.append("\n\n<!--WARN dependency converage flag! Currently used by the modules: " + rpt.deps.get(i).project + "-->\n");
            while (iterator.hasNext()) {
                if (rpt.deps.get(i).type.isEmpty()) {
                    sb.append('\t<dependency>\n');
                    sb.append('\t\t<groupId>' + rpt.deps.get(i).groupId + "</groupId>\n");
                    sb.append('\t\t<artifactId>' + rpt.deps.get(i).artifactId + "</artifactId>\n");
                    String version = iterator.next();
                    //a gradle wildcard
                    if ("+".equals(version)) {
                        version = "LATEST"
                    } else if (version.endsWith(".+")) {
                        //the version is something.+
                        version = "[" + version.replace(".+", ",)");
                    } else if (version.endsWith("+")) {
                        version = "[" + version.replace("+", ",)");
                    }
                    sb.append('\t\t<version>' + version + '</version>\n');
                    sb.append("\t</dependency>\n");
                } else {
                    def iterator2 = rpt.deps.get(i).type.iterator();
                    while (iterator2.hasNext()) {
                        sb.append('\t<dependency>\n');
                        sb.append('\t\t<groupId>' + rpt.deps.get(i).groupId + "</groupId>\n");
                        sb.append('\t\t<artifactId>' + rpt.deps.get(i).artifactId + "</artifactId>\n");
                        String version = iterator.next();
                        //a gradle wildcard
                        if ("+".equals(version)) {
                            version = "LATEST"
                        } else if (version.endsWith(".+")) {
                            //the version is something.+
                            version = "[" + version.replace(".+", ",)");
                        } else if (version.endsWith("+")) {
                            version = "[" + version.replace("+", ",)");
                        }
                        sb.append('\t\t<version>' + version + '</version>\n');
                        sb.append("\t\t<type>" + iterator2.next()).append("</type>\n");
                        sb.append("\t</dependency>\n");
                    }

                }
            }
            if (rpt.deps.get(i).version.size() > 1)
                sb.append("<!--END WARN dependency converage flag!-->\n\n    ")

        }
        sb.append('</dependencies>\n````\n');
        FileOutputStream fos = new FileOutputStream(outfile);
        fos.write((sb.toString()).getBytes());
        fos.close();
    }
}



Set<String> resolveType(Project it, String artificat, String version){
    Set<String> ret = new HashSet<>();
        String searcher = artificat + "-" + version;
        try
        {
            it.configurations.findAll { set ->
                set.each { config ->
                    // Note to future self
                    // this apparently dumps all every jar/aar/war/etc file name of the dependency
                    //useful for #21 and getting the type. This was initially written to get a list
                    //of all configurationNames since they vary from android/jar/war projects
                    if (config.name.startsWith(searcher)) {    
                            ret.add(config.name.substring(config.name.lastIndexOf(".")+1));
                    }
                    }
            }
        }
        catch (Exception e)
        {                        
        }                    
        return ret;
}
site.dependsOn dependencyReportMd




/**
 * upload the site
 */
task uploadSite(group: "Site Generation", description: 'Upload the web-site contents.')   {
    doLast {
        ssh.run {
            session(remotes.projectsite) {
                execute "rm -rf /var/www/html/$rootProject.name"
                put from: "${rootDir}/build/site/$rootProject.name", into: "/var/www/html"
            }
        }
    }
}